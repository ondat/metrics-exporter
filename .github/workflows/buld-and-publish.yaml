name: Build and publish

on: [ push ]

jobs:
  bundle-up-to-date:  
    name: Bundle.yaml is up to date
    runs-on: ubuntu-18.04
    steps:
      - name: Install kustomize
        run: curl -s "https://raw.githubusercontent.com/kubernetes-sigs/kustomize/master/hack/install_kustomize.sh" | bash
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Build bundle.yaml
        run: make bundle
      - name: Check diff
        run: git diff --exit-code -- manifests/bundle.yaml
  golangci:
    name: Go Linter
    runs-on: ubuntu-18.04
    needs: bundle-up-to-date
    steps:
      - name: Install dependencies
        run: |
          sudo apt update
          sudo apt install -y build-essential
          sudo apt install -y libdevmapper-dev
      - name: Set up Go
        uses: actions/setup-go@v2
        with:
         go-version: 1.17
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Run linter
        uses: golangci/golangci-lint-action@v2
        with:
          version: latest
          args: -c=".github/linters-cfg/.golangci.yml"
  superlinter:
    name: Super Linter (non-Go)
    runs-on: ubuntu-18.04
    needs: bundle-up-to-date
    steps:
      - name: Checkout Code
        uses: actions/checkout@v2
        with:
          # Full git history is needed to get a proper list of changed files within `super-linter`
          fetch-depth: 0
      - name: Run linter
        uses: github/super-linter/slim@v4 # slim image has -2gb and excludes support for languages we don't use
        env:
          VALIDATE_ALL_CODEBASE: false # only new or edited files
          FILTER_REGEX_EXCLUDE: vendor/* # avoid linting deps
          VALIDATE_MARKDOWN: true
          VALIDATE_SHELL_SHFMT: true
          VALIDATE_YAML: true
          VALIDATE_BASH: true
          DEFAULT_BRANCH: main
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          IGNORE_GITIGNORED_FILES: true
          LINTER_RULES_PATH: .github/linters-cfg # markdown and yaml cfg files used
  build:
    name: Build binary
    runs-on: ubuntu-18.04
    needs: [golangci, superlinter]
    steps:
      - name: Set up Go
        uses: actions/setup-go@v2
        with:
         go-version: 1.17
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Build binary
        run: make build
  publish-image-docker:
    if: startsWith(github.event.ref, 'refs/heads/release/v')
    runs-on: ubuntu-18.04
    name: Publish image to DockerHub
    needs: build
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          ref: ${{ github.event.inputs.gitRef }}
      - name: Set env var VERSION
        run: echo "VERSION=${GITHUB_REF#refs/heads/release/}" >> $GITHUB_ENV
      - name: Set env var IMAGE
        run: echo "IMAGE=metrics-exporter:${{ env.VERSION }}" >> $GITHUB_ENV
      - name: Build image
        run: make docker-build
      - name: Login to registry
        uses: docker/login-action@v1
        with:
          registry: docker.io
          username: ${{ secrets.DOCKERHUB_CLI_USERNAME }}
          password: ${{ secrets.DOCKERHUB_CLI_PASSWORD }}
      # - name: Push image
      #   run: make docker-push
  publish-image-redhat:
    # if: startsWith(github.event.ref, 'refs/heads/release/v')
    runs-on: ubuntu-18.04
    name: Publish image to RedHat
    needs: build
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          ref: ${{ github.event.inputs.gitRef }}
      - name: Set env var 1
        run: echo "event.ref ${{ github.event.ref }}"
      - name: Set env var VERSION
        run: echo "VERSION=${GITHUB_REF#refs/heads/release/}" >> $GITHUB_ENV
      - name: Set env var IMAGE
        run: echo "IMAGE=scan.connect.redhat.com/${{ secrets.OSPID }}/metrics-exporter:${{ env.VERSION }}" >> $GITHUB_ENV
      - name: Build image
        run: make docker-build
      - name: Login to registry
        uses: docker/login-action@v1
        with:
          registry: scan.connect.redhat.com
          username: ${{ secrets.RED_HAT_QUAY_CLI_USERNAME }}
          password: ${{ secrets.RED_HAT_QUAY_CLI_PASSWORD }}
      # - name: Push image
      #   run: docker docker-push